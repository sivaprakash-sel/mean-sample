"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var dom_helper_1 = require("../shared/dom-helper");
/**
 * Makes an element draggable by adding the draggable html attribute
 */
var Draggable = (function () {
    function Draggable(el, ng2DragDropService) {
        this.el = el;
        this.ng2DragDropService = ng2DragDropService;
        /**
         * Currently not used
         */
        this.dragEffect = 'move';
        /**
         * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
         */
        this.dragScope = 'default';
        /**
         * The CSS class applied to a draggable element. If a dragHandle is defined then its applied to that handle
         * element only. By default it is used to change the mouse over pointer.
         */
        this.dragHandleClass = 'drag-handle';
        /**
         * CSS class applied on the draggable that is applied when the item is being dragged.
         */
        this.dragClass = 'drag-border';
        /**
         * Event fired when Drag is started
         */
        this.onDragStart = new core_1.EventEmitter();
        /**
         * Event fired while the element is being dragged
         */
        this.onDrag = new core_1.EventEmitter();
        /**
         * Event fired when drag ends
         */
        this.onDragEnd = new core_1.EventEmitter();
        /**
         * @private
         * Backing field for the dragEnabled property
         */
        this._dragEnabled = true;
    }
    Object.defineProperty(Draggable.prototype, "dragImage", {
        get: function () {
            return this._dragImage;
        },
        /**
         * The url to image that will be used as custom drag image when the draggable is being dragged.
         */
        set: function (value) {
            this._dragImage = value;
            this.dragImageElement = new Image();
            this.dragImageElement.src = this.dragImage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Draggable.prototype, "dragEnabled", {
        get: function () {
            return this._dragEnabled;
        },
        /**
         * Defines if drag is enabled. `true` by default.
         */
        set: function (value) {
            this._dragEnabled = value;
            this.applyDragHandleClass();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Draggable.prototype.ngOnInit = function () {
        this.applyDragHandleClass();
    };
    Draggable.prototype.dragStart = function (e) {
        if (this.allowDrag()) {
            dom_helper_1.DomHelper.addClass(this.el, this.dragClass);
            this.ng2DragDropService.dragData = this.dragData;
            this.ng2DragDropService.scope = this.dragScope;
            // Firefox requires setData() to be called otherwise the drag does not work.
            // We don't use setData() to transfer data anymore so this is just a dummy call.
            if (e.dataTransfer != null) {
                e.dataTransfer.setData('text', '');
            }
            // Set dragImage
            if (this.dragImage) {
                e.dataTransfer.setDragImage(this.dragImageElement, 0, 0);
            }
            e.stopPropagation();
            this.onDragStart.emit(e);
            this.ng2DragDropService.onDragStart.next();
        }
        else {
            e.preventDefault();
        }
    };
    Draggable.prototype.drag = function (e) {
        this.onDrag.emit(e);
    };
    Draggable.prototype.dragEnd = function (e) {
        dom_helper_1.DomHelper.removeClass(this.el, this.dragClass);
        this.ng2DragDropService.onDragEnd.next();
        this.onDragEnd.emit(e);
        e.stopPropagation();
        e.preventDefault();
    };
    Draggable.prototype.mouseover = function (e) {
        this.mouseOverElement = e.target;
    };
    Draggable.prototype.allowDrag = function () {
        if (this.dragHandle) {
            return dom_helper_1.DomHelper.matches(this.mouseOverElement, this.dragHandle) && this.dragEnabled;
        }
        else {
            return this.dragEnabled;
        }
    };
    Draggable.prototype.applyDragHandleClass = function () {
        var dragElement = this.getDragHandleElement();
        if (this.dragEnabled) {
            dom_helper_1.DomHelper.addClass(dragElement, this.dragHandleClass);
        }
        else {
            dom_helper_1.DomHelper.removeClass(this.el, this.dragHandleClass);
        }
    };
    Draggable.prototype.getDragHandleElement = function () {
        var dragElement = this.el;
        if (this.dragHandle) {
            dragElement = this.el.nativeElement.querySelector(this.dragHandle);
        }
        return dragElement;
    };
    return Draggable;
}());
Draggable.decorators = [
    { type: core_1.Directive, args: [{
                selector: '[draggable]'
            },] },
];
/** @nocollapse */
Draggable.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
    { type: ng2_drag_drop_service_1.Ng2DragDropService, },
]; };
Draggable.propDecorators = {
    'dragData': [{ type: core_1.Input },],
    'dragHandle': [{ type: core_1.Input },],
    'dragEffect': [{ type: core_1.Input },],
    'dragScope': [{ type: core_1.Input },],
    'dragHandleClass': [{ type: core_1.Input },],
    'dragClass': [{ type: core_1.Input },],
    'dragImage': [{ type: core_1.Input },],
    'dragEnabled': [{ type: core_1.HostBinding, args: ['draggable',] }, { type: core_1.Input },],
    'onDragStart': [{ type: core_1.Output },],
    'onDrag': [{ type: core_1.Output },],
    'onDragEnd': [{ type: core_1.Output },],
    'dragStart': [{ type: core_1.HostListener, args: ['dragstart', ['$event'],] },],
    'drag': [{ type: core_1.HostListener, args: ['drag', ['$event'],] },],
    'dragEnd': [{ type: core_1.HostListener, args: ['dragend', ['$event'],] },],
    'mouseover': [{ type: core_1.HostListener, args: ['mouseover', ['$event'],] },],
};
exports.Draggable = Draggable;
//# sourceMappingURL=draggable.directive.js.map