"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var drop_event_model_1 = require("../shared/drop-event.model");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var dom_helper_1 = require("../shared/dom-helper");
var Droppable = (function () {
    function Droppable(el, ng2DragDropService) {
        this.el = el;
        this.ng2DragDropService = ng2DragDropService;
        /**
         *  Event fired when Drag dragged element enters a valid drop target.
         */
        this.onDragEnter = new core_1.EventEmitter();
        /**
         * Event fired when an element is being dragged over a valid drop target
         */
        this.onDragOver = new core_1.EventEmitter();
        /**
         * Event fired when a dragged element leaves a valid drop target.
         */
        this.onDragLeave = new core_1.EventEmitter();
        /**
         * Event fired when an element is dropped on a valid drop target.
         */
        this.onDrop = new core_1.EventEmitter();
        /**
         * CSS class that is applied when a compatible draggable is being dragged over this droppable.
         */
        this.dragOverClass = 'drag-over-border';
        /**
         * CSS class applied on this droppable when a compatible draggable item is being dragged.
         * This can be used to visually show allowed drop zones.
         */
        this.dragHintClass = 'drag-hint-border';
        /**
         * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
         */
        this.dropScope = 'default';
        /**
         * Defines if drop is enabled. `true` by default.
         */
        this.dropEnabled = true;
    }
    Droppable.prototype.ngOnInit = function () {
        var _this = this;
        this.dragStartSubscription = this.ng2DragDropService.onDragStart.subscribe(function () {
            if (_this.allowDrop()) {
                dom_helper_1.DomHelper.addClass(_this.el, _this.dragHintClass);
            }
        });
        this.dragEndSubscription = this.ng2DragDropService.onDragEnd.subscribe(function () {
            dom_helper_1.DomHelper.removeClass(_this.el, _this.dragHintClass);
        });
    };
    Droppable.prototype.ngOnDestroy = function () {
        this.dragStartSubscription.unsubscribe();
        this.dragEndSubscription.unsubscribe();
    };
    Droppable.prototype.dragEnter = function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.onDragEnter.emit(e);
    };
    Droppable.prototype.dragOver = function (e) {
        if (this.allowDrop()) {
            dom_helper_1.DomHelper.addClass(this.el, this.dragOverClass);
            e.preventDefault();
            this.onDragOver.emit(e);
        }
    };
    Droppable.prototype.dragLeave = function (e) {
        dom_helper_1.DomHelper.removeClass(this.el, this.dragOverClass);
        e.preventDefault();
        this.onDragLeave.emit(e);
    };
    Droppable.prototype.drop = function (e) {
        dom_helper_1.DomHelper.removeClass(this.el, this.dragOverClass);
        e.preventDefault();
        e.stopPropagation();
        this.ng2DragDropService.onDragEnd.next();
        this.onDrop.emit(new drop_event_model_1.DropEvent(e, this.ng2DragDropService.dragData));
        this.ng2DragDropService.dragData = null;
        this.ng2DragDropService.scope = null;
    };
    Droppable.prototype.allowDrop = function () {
        var _this = this;
        var allowed = false;
        /* tslint:disable:curly */
        /* tslint:disable:one-line */
        if (typeof this.dropScope === 'string') {
            if (typeof this.ng2DragDropService.scope === 'string')
                allowed = this.ng2DragDropService.scope === this.dropScope;
            else if (this.ng2DragDropService.scope instanceof Array)
                allowed = this.ng2DragDropService.scope.indexOf(this.dropScope) > -1;
        }
        else if (this.dropScope instanceof Array) {
            if (typeof this.ng2DragDropService.scope === 'string')
                allowed = this.dropScope.indexOf(this.ng2DragDropService.scope) > -1;
            else if (this.ng2DragDropService.scope instanceof Array)
                allowed = this.dropScope.filter(function (item) {
                    return _this.ng2DragDropService.scope.indexOf(item) !== -1;
                }).length > 0;
        }
        /* tslint:enable:curly */
        /* tslint:disable:one-line */
        return allowed && this.dropEnabled;
    };
    return Droppable;
}());
Droppable.decorators = [
    { type: core_1.Directive, args: [{
                selector: '[droppable]'
            },] },
];
/** @nocollapse */
Droppable.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
    { type: ng2_drag_drop_service_1.Ng2DragDropService, },
]; };
Droppable.propDecorators = {
    'onDragEnter': [{ type: core_1.Output },],
    'onDragOver': [{ type: core_1.Output },],
    'onDragLeave': [{ type: core_1.Output },],
    'onDrop': [{ type: core_1.Output },],
    'dragOverClass': [{ type: core_1.Input },],
    'dragHintClass': [{ type: core_1.Input },],
    'dropScope': [{ type: core_1.Input },],
    'dropEnabled': [{ type: core_1.Input },],
    'dragEnter': [{ type: core_1.HostListener, args: ['dragenter', ['$event'],] },],
    'dragOver': [{ type: core_1.HostListener, args: ['dragover', ['$event'],] },],
    'dragLeave': [{ type: core_1.HostListener, args: ['dragleave', ['$event'],] },],
    'drop': [{ type: core_1.HostListener, args: ['drop', ['$event'],] },],
};
exports.Droppable = Droppable;
//# sourceMappingURL=droppable.directive.js.map