"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var SortableContainer = (function () {
    function SortableContainer(sortableService) {
        this.sortableService = sortableService;
        /**
         * Delete items on swap
         */
        this.deleteOnSwap = true;
        /**
         * Event fired when item is dragged to another list
         */
        this.onSwap = new core_1.EventEmitter();
    }
    SortableContainer.prototype.dragLeave = function (e) {
        e.preventDefault();
    };
    SortableContainer.prototype.dragOver = function (e) {
        e.preventDefault();
    };
    SortableContainer.prototype.drop = function (e) {
        this.sortableService.sortableItems = [];
    };
    SortableContainer.prototype.dragEnter = function (e) {
        if (this.sortableService.sortableItems.length) {
            var item = this.sortableService.dragItem;
            // If item does not exist. Mostly used for swap list
            if (item && this.sortableItems.indexOf(item) === -1) {
                if (this.deleteOnSwap) {
                    // Remove from previous list
                    var previousListIndex = this.sortableService.sortableItems.indexOf(item);
                    this.sortableService.sortableItems.splice(previousListIndex, 1);
                }
                // Add in current list
                this.sortableItems.splice(0, 0, item);
                // Update sort index where the item is added.
                this.sortableService.sortIndex = 0;
                // Swapped Item is emitted back
                this.onSwap.emit(item);
            }
        }
        this.sortableService.sortableItems = this.sortableItems;
        console.log('DragEnter', 'Container');
    };
    return SortableContainer;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], SortableContainer.prototype, "sortableItems", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SortableContainer.prototype, "deleteOnSwap", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], SortableContainer.prototype, "onSwap", void 0);
__decorate([
    core_1.HostListener('dragleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SortableContainer.prototype, "dragLeave", null);
__decorate([
    core_1.HostListener('dragover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SortableContainer.prototype, "dragOver", null);
__decorate([
    core_1.HostListener('drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SortableContainer.prototype, "drop", null);
__decorate([
    core_1.HostListener('dragenter', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SortableContainer.prototype, "dragEnter", null);
SortableContainer = __decorate([
    core_1.Directive({
        'selector': '[sortable-container]'
    }),
    __metadata("design:paramtypes", [ng2_drag_drop_service_1.Ng2SortableService])
], SortableContainer);
exports.SortableContainer = SortableContainer;
//# sourceMappingURL=sortable-container.directive.js.map