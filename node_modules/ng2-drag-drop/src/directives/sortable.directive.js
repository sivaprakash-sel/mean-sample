"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var dom_helper_1 = require("../shared/dom-helper");
var Sortable = (function () {
    function Sortable(el, ng2SortableService) {
        this.el = el;
        this.ng2SortableService = ng2SortableService;
        /**
         * CSS class applied on the draggable that is applied when the item is being dragged.
         */
        this.dragClass = 'drag-border';
        /**
         * CSS class that is applied when an item is being dragged over this sortable.
         */
        this.dragOverClass = 'drag-over-expand';
        /**
         * The CSS class applied to a draggable element. If a dragHandle is defined then its applied to that handle
         * element only. By default it is used to change the mouse over pointer.
         */
        this.dragHandleClass = 'drag-handle';
        /**
         * Event fired when Drag is started
         */
        this.onDragStart = new core_1.EventEmitter();
        /**
         * Event fired while the element is being dragged
         */
        this.onDrag = new core_1.EventEmitter();
        /**
         * Event fired when drag ends
         */
        this.onDragEnd = new core_1.EventEmitter();
        /**
         * @private
         * Backing field for the dragEnabled property
         */
        this._dragEnabled = true;
    }
    Object.defineProperty(Sortable.prototype, "dragEnabled", {
        get: function () {
            return this._dragEnabled;
        },
        /**
         * Defines if drag is enabled. `true` by default.
         */
        set: function (value) {
            this._dragEnabled = value;
            this.applyDragHandleClass();
        },
        enumerable: true,
        configurable: true
    });
    ;
    Sortable.prototype.ngOnInit = function () {
        this.applyDragHandleClass();
    };
    Sortable.prototype.dragStart = function (e) {
        if (this.allowDrag()) {
            dom_helper_1.DomHelper.addClass(this.el, this.dragClass);
            this.ng2SortableService.sortIndex = this.sortIndex;
            this.ng2SortableService.dragItem = this.sortItem;
            // Firefox requires setData() to be called otherwise the drag does not work.
            // We don't use setData() to transfer data anymore so this is just a dummy call.
            if (e.dataTransfer != null) {
                e.dataTransfer.setData('text', '');
            }
            e.stopPropagation();
            this.onDragStart.emit(e);
        }
        else {
            e.preventDefault();
        }
        console.log('DragStart', 'Directive');
    };
    Sortable.prototype.drag = function (e) {
        this.onDrag.emit(e);
    };
    Sortable.prototype.dragenter = function (e) {
        if (this.sortIndex !== this.ng2SortableService.sortIndex) {
            var sortItem = this.ng2SortableService.sortableItems[this.ng2SortableService.sortIndex];
            // Remove item
            var previousIndex = this.ng2SortableService.sortableItems.indexOf(this.ng2SortableService.dragItem);
            this.ng2SortableService.sortableItems.splice(previousIndex, 1);
            // Add item
            this.ng2SortableService.sortableItems.splice(this.sortIndex, 0, sortItem);
            // Update index
            this.ng2SortableService.sortIndex = this.sortIndex;
        }
        e.preventDefault();
        // DomHelper.addClass(this.el, this.dragOverClass);
        console.log('DragEnter', 'Directive');
    };
    Sortable.prototype.dragLeave = function (e) {
        dom_helper_1.DomHelper.removeClass(this.el, this.dragOverClass);
        e.preventDefault();
    };
    Sortable.prototype.dragEnd = function (e) {
        dom_helper_1.DomHelper.removeClass(this.el, this.dragClass);
        dom_helper_1.DomHelper.removeClass(this.el, this.dragOverClass);
        this.ng2SortableService.sortableItems = [];
        this.onDragEnd.emit(e);
        e.stopPropagation();
        e.preventDefault();
    };
    Sortable.prototype.mouseover = function (e) {
        this.mouseOverElement = e.target;
    };
    Sortable.prototype.allowDrag = function () {
        if (this.dragHandle) {
            return dom_helper_1.DomHelper.matches(this.mouseOverElement, this.dragHandle) && this.dragEnabled;
        }
        else {
            return this.dragEnabled;
        }
    };
    Sortable.prototype.applyDragHandleClass = function () {
        var dragElement = this.getDragHandleElement();
        if (this.dragEnabled) {
            dom_helper_1.DomHelper.addClass(dragElement, this.dragHandleClass);
        }
        else {
            dom_helper_1.DomHelper.removeClass(this.el, this.dragHandleClass);
        }
    };
    Sortable.prototype.getDragHandleElement = function () {
        var dragElement = this.el;
        if (this.dragHandle) {
            dragElement = this.el.nativeElement.querySelector(this.dragHandle);
        }
        return dragElement;
    };
    return Sortable;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sortable.prototype, "sortIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sortable.prototype, "sortItem", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Sortable.prototype, "dragHandle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sortable.prototype, "dragClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sortable.prototype, "dragOverClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sortable.prototype, "dragHandleClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], Sortable.prototype, "dragEnabled", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sortable.prototype, "onDragStart", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sortable.prototype, "onDrag", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sortable.prototype, "onDragEnd", void 0);
__decorate([
    core_1.HostListener('dragstart', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "dragStart", null);
__decorate([
    core_1.HostListener('drag', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "drag", null);
__decorate([
    core_1.HostListener('dragenter', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "dragenter", null);
__decorate([
    core_1.HostListener('dragleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "dragLeave", null);
__decorate([
    core_1.HostListener('dragend', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "dragEnd", null);
__decorate([
    core_1.HostListener('mouseover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Sortable.prototype, "mouseover", null);
Sortable = __decorate([
    core_1.Directive({
        selector: '[sortable]',
        host: {
            '[draggable]': 'true'
        }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, ng2_drag_drop_service_1.Ng2SortableService])
], Sortable);
exports.Sortable = Sortable;
//# sourceMappingURL=sortable.directive.js.map